// This file is auto-generated by @hey-api/openapi-ts

import { type DefaultError, queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { authJwtLogin, authJwtLogout, type Options, registerRegister, resetForgotPassword, resetResetPassword, usersCurrentUser, usersDeleteUser, usersPatchCurrentUser, usersPatchUser, usersUser, verifyRequestToken, verifyVerify } from '../sdk.gen';
import type { AuthJwtLoginData, AuthJwtLoginError, AuthJwtLoginResponse, AuthJwtLogoutData, AuthJwtLogoutResponse, RegisterRegisterData, RegisterRegisterError, RegisterRegisterResponse, ResetForgotPasswordData, ResetForgotPasswordError, ResetResetPasswordData, ResetResetPasswordError, UsersCurrentUserData, UsersDeleteUserData, UsersDeleteUserError, UsersDeleteUserResponse, UsersPatchCurrentUserData, UsersPatchCurrentUserError, UsersPatchCurrentUserResponse, UsersPatchUserData, UsersPatchUserError, UsersPatchUserResponse, UsersUserData, VerifyRequestTokenData, VerifyRequestTokenError, VerifyVerifyData, VerifyVerifyError, VerifyVerifyResponse } from '../types.gen';

/**
 * Auth:Jwt.Login
 */
export const authJwtLoginMutation = (options?: Partial<Options<AuthJwtLoginData>>): UseMutationOptions<AuthJwtLoginResponse, AuthJwtLoginError, Options<AuthJwtLoginData>> => {
    const mutationOptions: UseMutationOptions<AuthJwtLoginResponse, AuthJwtLoginError, Options<AuthJwtLoginData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await authJwtLogin({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Auth:Jwt.Logout
 */
export const authJwtLogoutMutation = (options?: Partial<Options<AuthJwtLogoutData>>): UseMutationOptions<AuthJwtLogoutResponse, DefaultError, Options<AuthJwtLogoutData>> => {
    const mutationOptions: UseMutationOptions<AuthJwtLogoutResponse, DefaultError, Options<AuthJwtLogoutData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await authJwtLogout({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Register:Register
 */
export const registerRegisterMutation = (options?: Partial<Options<RegisterRegisterData>>): UseMutationOptions<RegisterRegisterResponse, RegisterRegisterError, Options<RegisterRegisterData>> => {
    const mutationOptions: UseMutationOptions<RegisterRegisterResponse, RegisterRegisterError, Options<RegisterRegisterData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await registerRegister({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Reset:Forgot Password
 */
export const resetForgotPasswordMutation = (options?: Partial<Options<ResetForgotPasswordData>>): UseMutationOptions<unknown, ResetForgotPasswordError, Options<ResetForgotPasswordData>> => {
    const mutationOptions: UseMutationOptions<unknown, ResetForgotPasswordError, Options<ResetForgotPasswordData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await resetForgotPassword({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Reset:Reset Password
 */
export const resetResetPasswordMutation = (options?: Partial<Options<ResetResetPasswordData>>): UseMutationOptions<unknown, ResetResetPasswordError, Options<ResetResetPasswordData>> => {
    const mutationOptions: UseMutationOptions<unknown, ResetResetPasswordError, Options<ResetResetPasswordData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await resetResetPassword({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Verify:Request-Token
 */
export const verifyRequestTokenMutation = (options?: Partial<Options<VerifyRequestTokenData>>): UseMutationOptions<unknown, VerifyRequestTokenError, Options<VerifyRequestTokenData>> => {
    const mutationOptions: UseMutationOptions<unknown, VerifyRequestTokenError, Options<VerifyRequestTokenData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await verifyRequestToken({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Verify:Verify
 */
export const verifyVerifyMutation = (options?: Partial<Options<VerifyVerifyData>>): UseMutationOptions<VerifyVerifyResponse, VerifyVerifyError, Options<VerifyVerifyData>> => {
    const mutationOptions: UseMutationOptions<VerifyVerifyResponse, VerifyVerifyError, Options<VerifyVerifyData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await verifyVerify({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const usersCurrentUserQueryKey = (options?: Options<UsersCurrentUserData>) => createQueryKey('usersCurrentUser', options);

/**
 * Users:Current User
 */
export const usersCurrentUserOptions = (options?: Options<UsersCurrentUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersCurrentUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersCurrentUserQueryKey(options)
    });
};

/**
 * Users:Patch Current User
 */
export const usersPatchCurrentUserMutation = (options?: Partial<Options<UsersPatchCurrentUserData>>): UseMutationOptions<UsersPatchCurrentUserResponse, UsersPatchCurrentUserError, Options<UsersPatchCurrentUserData>> => {
    const mutationOptions: UseMutationOptions<UsersPatchCurrentUserResponse, UsersPatchCurrentUserError, Options<UsersPatchCurrentUserData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await usersPatchCurrentUser({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Users:Delete User
 */
export const usersDeleteUserMutation = (options?: Partial<Options<UsersDeleteUserData>>): UseMutationOptions<UsersDeleteUserResponse, UsersDeleteUserError, Options<UsersDeleteUserData>> => {
    const mutationOptions: UseMutationOptions<UsersDeleteUserResponse, UsersDeleteUserError, Options<UsersDeleteUserData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await usersDeleteUser({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersUserQueryKey = (options: Options<UsersUserData>) => createQueryKey('usersUser', options);

/**
 * Users:User
 */
export const usersUserOptions = (options: Options<UsersUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersUserQueryKey(options)
    });
};

/**
 * Users:Patch User
 */
export const usersPatchUserMutation = (options?: Partial<Options<UsersPatchUserData>>): UseMutationOptions<UsersPatchUserResponse, UsersPatchUserError, Options<UsersPatchUserData>> => {
    const mutationOptions: UseMutationOptions<UsersPatchUserResponse, UsersPatchUserError, Options<UsersPatchUserData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await usersPatchUser({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
