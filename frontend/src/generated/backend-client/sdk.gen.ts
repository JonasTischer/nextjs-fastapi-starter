// This file is auto-generated by @hey-api/openapi-ts

import { type Client, type Options as Options2, type TDataShape, urlSearchParamsBodySerializer } from './client';
import { client } from './client.gen';
import type { AuthJwtLoginData, AuthJwtLoginErrors, AuthJwtLoginResponses, AuthJwtLogoutData, AuthJwtLogoutErrors, AuthJwtLogoutResponses, OauthGoogleOauthJwtAuthorizeData, OauthGoogleOauthJwtAuthorizeErrors, OauthGoogleOauthJwtAuthorizeResponses, OauthGoogleOauthJwtCallbackData, OauthGoogleOauthJwtCallbackErrors, OauthGoogleOauthJwtCallbackResponses, RegisterRegisterData, RegisterRegisterErrors, RegisterRegisterResponses, ResetForgotPasswordData, ResetForgotPasswordErrors, ResetForgotPasswordResponses, ResetResetPasswordData, ResetResetPasswordErrors, ResetResetPasswordResponses, UsersCurrentUserData, UsersCurrentUserErrors, UsersCurrentUserResponses, UsersDeleteUserData, UsersDeleteUserErrors, UsersDeleteUserResponses, UsersPatchCurrentUserData, UsersPatchCurrentUserErrors, UsersPatchCurrentUserResponses, UsersPatchUserData, UsersPatchUserErrors, UsersPatchUserResponses, UsersUserData, UsersUserErrors, UsersUserResponses, VerifyRequestTokenData, VerifyRequestTokenErrors, VerifyRequestTokenResponses, VerifyVerifyData, VerifyVerifyErrors, VerifyVerifyResponses } from './types.gen';
import { zAuthJwtLoginData, zAuthJwtLoginResponse, zAuthJwtLogoutData, zAuthJwtLogoutResponse, zOauthGoogleOauthJwtAuthorizeData, zOauthGoogleOauthJwtAuthorizeResponse, zOauthGoogleOauthJwtCallbackData, zRegisterRegisterData, zRegisterRegisterResponse, zResetForgotPasswordData, zResetResetPasswordData, zUsersCurrentUserData, zUsersCurrentUserResponse, zUsersDeleteUserData, zUsersDeleteUserResponse, zUsersPatchCurrentUserData, zUsersPatchCurrentUserResponse, zUsersPatchUserData, zUsersPatchUserResponse, zUsersUserData, zUsersUserResponse, zVerifyRequestTokenData, zVerifyVerifyData, zVerifyVerifyResponse } from './zod.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Auth:Jwt.Login
 */
export const authJwtLogin = <ThrowOnError extends boolean = false>(options: Options<AuthJwtLoginData, ThrowOnError>) => {
    return (options.client ?? client).post<AuthJwtLoginResponses, AuthJwtLoginErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        requestValidator: async (data) => {
            return await zAuthJwtLoginData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zAuthJwtLoginResponse.parseAsync(data);
        },
        url: '/auth/jwt/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Auth:Jwt.Logout
 */
export const authJwtLogout = <ThrowOnError extends boolean = false>(options?: Options<AuthJwtLogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<AuthJwtLogoutResponses, AuthJwtLogoutErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zAuthJwtLogoutData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zAuthJwtLogoutResponse.parseAsync(data);
        },
        security: [
            {
                in: 'cookie',
                name: 'access_token',
                type: 'apiKey'
            }
        ],
        url: '/auth/jwt/logout',
        ...options
    });
};

/**
 * Register:Register
 */
export const registerRegister = <ThrowOnError extends boolean = false>(options: Options<RegisterRegisterData, ThrowOnError>) => {
    return (options.client ?? client).post<RegisterRegisterResponses, RegisterRegisterErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zRegisterRegisterData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zRegisterRegisterResponse.parseAsync(data);
        },
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset:Forgot Password
 */
export const resetForgotPassword = <ThrowOnError extends boolean = false>(options: Options<ResetForgotPasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<ResetForgotPasswordResponses, ResetForgotPasswordErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zResetForgotPasswordData.parseAsync(data);
        },
        url: '/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset:Reset Password
 */
export const resetResetPassword = <ThrowOnError extends boolean = false>(options: Options<ResetResetPasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<ResetResetPasswordResponses, ResetResetPasswordErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zResetResetPasswordData.parseAsync(data);
        },
        url: '/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify:Request-Token
 */
export const verifyRequestToken = <ThrowOnError extends boolean = false>(options: Options<VerifyRequestTokenData, ThrowOnError>) => {
    return (options.client ?? client).post<VerifyRequestTokenResponses, VerifyRequestTokenErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zVerifyRequestTokenData.parseAsync(data);
        },
        url: '/auth/request-verify-token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify:Verify
 */
export const verifyVerify = <ThrowOnError extends boolean = false>(options: Options<VerifyVerifyData, ThrowOnError>) => {
    return (options.client ?? client).post<VerifyVerifyResponses, VerifyVerifyErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zVerifyVerifyData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zVerifyVerifyResponse.parseAsync(data);
        },
        url: '/auth/verify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Users:Current User
 */
export const usersCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<UsersCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<UsersCurrentUserResponses, UsersCurrentUserErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zUsersCurrentUserData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zUsersCurrentUserResponse.parseAsync(data);
        },
        security: [
            {
                in: 'cookie',
                name: 'access_token',
                type: 'apiKey'
            }
        ],
        url: '/auth/users/me',
        ...options
    });
};

/**
 * Users:Patch Current User
 */
export const usersPatchCurrentUser = <ThrowOnError extends boolean = false>(options: Options<UsersPatchCurrentUserData, ThrowOnError>) => {
    return (options.client ?? client).patch<UsersPatchCurrentUserResponses, UsersPatchCurrentUserErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zUsersPatchCurrentUserData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zUsersPatchCurrentUserResponse.parseAsync(data);
        },
        security: [
            {
                in: 'cookie',
                name: 'access_token',
                type: 'apiKey'
            }
        ],
        url: '/auth/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Users:Delete User
 */
export const usersDeleteUser = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserData, ThrowOnError>) => {
    return (options.client ?? client).delete<UsersDeleteUserResponses, UsersDeleteUserErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zUsersDeleteUserData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zUsersDeleteUserResponse.parseAsync(data);
        },
        security: [
            {
                in: 'cookie',
                name: 'access_token',
                type: 'apiKey'
            }
        ],
        url: '/auth/users/{id}',
        ...options
    });
};

/**
 * Users:User
 */
export const usersUser = <ThrowOnError extends boolean = false>(options: Options<UsersUserData, ThrowOnError>) => {
    return (options.client ?? client).get<UsersUserResponses, UsersUserErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zUsersUserData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zUsersUserResponse.parseAsync(data);
        },
        security: [
            {
                in: 'cookie',
                name: 'access_token',
                type: 'apiKey'
            }
        ],
        url: '/auth/users/{id}',
        ...options
    });
};

/**
 * Users:Patch User
 */
export const usersPatchUser = <ThrowOnError extends boolean = false>(options: Options<UsersPatchUserData, ThrowOnError>) => {
    return (options.client ?? client).patch<UsersPatchUserResponses, UsersPatchUserErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zUsersPatchUserData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zUsersPatchUserResponse.parseAsync(data);
        },
        security: [
            {
                in: 'cookie',
                name: 'access_token',
                type: 'apiKey'
            }
        ],
        url: '/auth/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Oauth:Google.Oauth-Jwt.Authorize
 */
export const oauthGoogleOauthJwtAuthorize = <ThrowOnError extends boolean = false>(options?: Options<OauthGoogleOauthJwtAuthorizeData, ThrowOnError>) => {
    return (options?.client ?? client).get<OauthGoogleOauthJwtAuthorizeResponses, OauthGoogleOauthJwtAuthorizeErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zOauthGoogleOauthJwtAuthorizeData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zOauthGoogleOauthJwtAuthorizeResponse.parseAsync(data);
        },
        url: '/auth/google/authorize',
        ...options
    });
};

/**
 * Oauth:Google.Oauth-Jwt.Callback
 * The response varies based on the authentication backend used.
 */
export const oauthGoogleOauthJwtCallback = <ThrowOnError extends boolean = false>(options?: Options<OauthGoogleOauthJwtCallbackData, ThrowOnError>) => {
    return (options?.client ?? client).get<OauthGoogleOauthJwtCallbackResponses, OauthGoogleOauthJwtCallbackErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zOauthGoogleOauthJwtCallbackData.parseAsync(data);
        },
        url: '/auth/google/callback',
        ...options
    });
};
