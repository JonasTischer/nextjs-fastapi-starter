// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

/**
 * Body_auth-reset:forgot_password
 */
export const zBodyAuthResetForgotPassword = z.object({
    email: z.email()
});

/**
 * Body_auth-reset:reset_password
 */
export const zBodyAuthResetResetPassword = z.object({
    token: z.string(),
    password: z.string()
});

/**
 * Body_auth-verify:request-token
 */
export const zBodyAuthVerifyRequestToken = z.object({
    email: z.email()
});

/**
 * Body_auth-verify:verify
 */
export const zBodyAuthVerifyVerify = z.object({
    token: z.string()
});

/**
 * ErrorModel
 */
export const zErrorModel = z.object({
    detail: z.union([
        z.string(),
        z.record(z.string(), z.string())
    ])
});

/**
 * ValidationError
 */
export const zValidationError = z.object({
    loc: z.array(z.union([
        z.string(),
        z.int()
    ])),
    msg: z.string(),
    type: z.string()
});

/**
 * HTTPValidationError
 */
export const zHttpValidationError = z.object({
    detail: z.optional(z.array(zValidationError))
});

/**
 * UserCreate
 */
export const zUserCreate = z.object({
    email: z.email(),
    password: z.string(),
    is_active: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    is_superuser: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    is_verified: z.optional(z.union([
        z.boolean(),
        z.null()
    ]))
});

/**
 * UserRead
 */
export const zUserRead = z.object({
    id: z.uuid(),
    email: z.email(),
    is_active: z.optional(z.boolean()).default(true),
    is_superuser: z.optional(z.boolean()).default(false),
    is_verified: z.optional(z.boolean()).default(false)
});

/**
 * UserUpdate
 */
export const zUserUpdate = z.object({
    password: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    email: z.optional(z.union([
        z.email(),
        z.null()
    ])),
    is_active: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    is_superuser: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    is_verified: z.optional(z.union([
        z.boolean(),
        z.null()
    ]))
});

/**
 * Body_auth-auth:jwt.login
 */
export const zLogin = z.object({
    grant_type: z.optional(z.union([
        z.string().regex(/^password$/),
        z.null()
    ])),
    username: z.string(),
    password: z.string(),
    scope: z.optional(z.string()).default(''),
    client_id: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    client_secret: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zAuthJwtLoginData = z.object({
    body: zLogin,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAuthJwtLoginResponse = z.union([
    z.unknown(),
    z.void()
]);

export const zAuthJwtLogoutData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAuthJwtLogoutResponse = z.union([
    z.unknown(),
    z.void()
]);

export const zRegisterRegisterData = z.object({
    body: zUserCreate,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zRegisterRegisterResponse = zUserRead;

export const zResetForgotPasswordData = z.object({
    body: zBodyAuthResetForgotPassword,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zResetResetPasswordData = z.object({
    body: zBodyAuthResetResetPassword,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zVerifyRequestTokenData = z.object({
    body: zBodyAuthVerifyRequestToken,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zVerifyVerifyData = z.object({
    body: zBodyAuthVerifyVerify,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zVerifyVerifyResponse = zUserRead;

export const zUsersCurrentUserData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUsersCurrentUserResponse = zUserRead;

export const zUsersPatchCurrentUserData = z.object({
    body: zUserUpdate,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUsersPatchCurrentUserResponse = zUserRead;

export const zUsersDeleteUserData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUsersDeleteUserResponse = z.void();

export const zUsersUserData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUsersUserResponse = zUserRead;

export const zUsersPatchUserData = z.object({
    body: zUserUpdate,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUsersPatchUserResponse = zUserRead;
