name: CI

on:
  push:
  pull_request:

jobs:
  build-fastapi:
    name: FastAPI CI

    runs-on: ubuntu-latest

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      ACCESS_SECRET_KEY: ${{ secrets.ACCESS_SECRET_KEY }}
      RESET_PASSWORD_SECRET_KEY: ${{ secrets.RESET_PASSWORD_SECRET_KEY }}
      VERIFICATION_SECRET_KEY: ${{ secrets.VERIFICATION_SECRET_KEY }}
      CORS_ORIGINS: ${{ secrets.CORS_ORIGINS }}

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdatabase
        ports:
          - 5433:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install the project
        working-directory: ./backend
        run: uv sync --all-extras --dev

      - name: Run tests
        working-directory: ./backend
        run: uv run coverage run -m pytest

      - name: Generate XML coverage report
        working-directory: ./backend
        run: uv run coverage xml -o coverage.xml

  build-frontend:
    name: Next.js CI

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Node dependencies
        working-directory: ./frontend
        run: pnpm install

      - name: Run tests
        working-directory: ./frontend
        run: pnpm run test

  e2e-tests:
    name: Playwright E2E
    needs: [build-fastapi, build-frontend]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdatabase
        ports:
          - 5433:5432
    env:
      DATABASE_URL: postgresql://postgres:password@localhost:5433/testdatabase
      TEST_DATABASE_URL: postgresql://postgres:password@localhost:5433/testdatabase
      ACCESS_SECRET_KEY: test-access-secret
      RESET_PASSWORD_SECRET_KEY: test-reset-secret
      VERIFICATION_SECRET_KEY: test-verification-secret
      CORS_ORIGINS: '["http://127.0.0.1:3000","http://localhost:3000"]'
      API_BASE_URL: http://127.0.0.1:8000
      PLAYWRIGHT_API_BASE_URL: http://127.0.0.1:8000
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Node dependencies
        working-directory: ./frontend
        run: pnpm install

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: pnpm exec playwright install --with-deps

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install backend dependencies
        working-directory: ./backend
        run: uv sync --all-extras --dev

      - name: Run database migrations
        working-directory: ./backend
        run: uv run alembic upgrade head

      - name: Start backend server
        working-directory: ./backend
        run: |
          uv run uvicorn src.main:app --host 0.0.0.0 --port 8000 &
          echo $! > ../backend.pid

      - name: Wait for backend to be ready
        run: pnpm dlx wait-on http://127.0.0.1:8000/openapi.json

      - name: Run Playwright tests
        working-directory: ./frontend
        run: pnpm run test:e2e

      - name: Stop backend server
        if: always()
        run: |
          if [ -f backend.pid ]; then
            kill $(cat backend.pid) || true
            rm backend.pid
          fi